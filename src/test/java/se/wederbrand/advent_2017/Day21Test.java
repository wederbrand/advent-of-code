package se.wederbrand.advent_2017;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Day21Test {
	String INPUT = "../.. => ###/#../.#.\n" +
		"#./.. => ##./.#./...\n" +
		"##/.. => ..#/.#./#.#\n" +
		".#/#. => ..#/.#./..#\n" +
		"##/#. => .../.##/##.\n" +
		"##/## => ###/#../#..\n" +
		".../.../... => .#../.#../#..#/##..\n" +
		"#../.../... => ####/####/.###/####\n" +
		".#./.../... => ####/..../#.#./.#.#\n" +
		"##./.../... => ..##/###./...#/##.#\n" +
		"#.#/.../... => .#../#..#/.#../#.#.\n" +
		"###/.../... => #.##/..##/##.#/..##\n" +
		".#./#../... => .##./#..#/..../....\n" +
		"##./#../... => ##../.#../...#/####\n" +
		"..#/#../... => ##../###./...#/.#.#\n" +
		"#.#/#../... => ####/#.../..../##..\n" +
		".##/#../... => #..#/..##/#..#/....\n" +
		"###/#../... => #.##/####/..#./#.#.\n" +
		".../.#./... => #.##/.#.#/#.../...#\n" +
		"#../.#./... => .###/##.#/..../###.\n" +
		".#./.#./... => ..#./.#../..../##..\n" +
		"##./.#./... => ##../...#/..../....\n" +
		"#.#/.#./... => ####/.#../..#./.###\n" +
		"###/.#./... => ..#./.###/##../.##.\n" +
		".#./##./... => ###./#.#./.###/.##.\n" +
		"##./##./... => ...#/.#../.#../####\n" +
		"..#/##./... => ..#./#.../##../###.\n" +
		"#.#/##./... => #.../..../.#.#/.###\n" +
		".##/##./... => #.#./.#../####/.###\n" +
		"###/##./... => .#.#/#.#./##../#...\n" +
		".../#.#/... => #.##/##.#/..../#.#.\n" +
		"#../#.#/... => ##../#.##/###./###.\n" +
		".#./#.#/... => ##../.#../#.##/###.\n" +
		"##./#.#/... => ##../##../..#./..#.\n" +
		"#.#/#.#/... => #.../.##./.###/###.\n" +
		"###/#.#/... => ##.#/##../.##./#...\n" +
		".../###/... => ...#/####/..../#..#\n" +
		"#../###/... => ##.#/##.#/.##./#.#.\n" +
		".#./###/... => .#../#.../.#.#/##.#\n" +
		"##./###/... => ##.#/#.#./#.../.#..\n" +
		"#.#/###/... => ..../#.../####/.#..\n" +
		"###/###/... => .#../#..#/.#../.#..\n" +
		"..#/.../#.. => .#.#/#.../..##/...#\n" +
		"#.#/.../#.. => ####/####/###./...#\n" +
		".##/.../#.. => ####/.###/##.#/##..\n" +
		"###/.../#.. => ..##/..../...#/#.#.\n" +
		".##/#../#.. => ###./..#./##.#/##.#\n" +
		"###/#../#.. => ##.#/...#/.##./.###\n" +
		"..#/.#./#.. => #.#./#.#./...#/#.#.\n" +
		"#.#/.#./#.. => ###./.#.#/#.#./.#..\n" +
		".##/.#./#.. => #.#./.##./.###/#.#.\n" +
		"###/.#./#.. => #.../#.../#.#./.###\n" +
		".##/##./#.. => .#.#/.##./..#./##..\n" +
		"###/##./#.. => .###/.##./#.##/..##\n" +
		"#../..#/#.. => #.#./#..#/###./.##.\n" +
		".#./..#/#.. => ###./.###/...#/..##\n" +
		"##./..#/#.. => ###./##../####/.#.#\n" +
		"#.#/..#/#.. => ..#./.#../.##./.#..\n" +
		".##/..#/#.. => ##.#/###./.##./#...\n" +
		"###/..#/#.. => ...#/..##/##.#/##.#\n" +
		"#../#.#/#.. => #.../.##./.#.#/.###\n" +
		".#./#.#/#.. => #.##/...#/####/###.\n" +
		"##./#.#/#.. => .#../#.../.###/....\n" +
		"..#/#.#/#.. => ####/###./.#.#/#...\n" +
		"#.#/#.#/#.. => ###./..##/...#/#.##\n" +
		".##/#.#/#.. => ##.#/..#./..##/.#.#\n" +
		"###/#.#/#.. => #.#./..../##../.###\n" +
		"#../.##/#.. => #..#/###./.#.#/##.#\n" +
		".#./.##/#.. => #.../.###/.##./.###\n" +
		"##./.##/#.. => .#../###./.#../##.#\n" +
		"#.#/.##/#.. => .#../#.#./.#../#.##\n" +
		".##/.##/#.. => ##../###./.#.#/.###\n" +
		"###/.##/#.. => ..##/...#/#.../.#..\n" +
		"#../###/#.. => #.##/#..#/####/###.\n" +
		".#./###/#.. => .###/.#.#/#.#./..#.\n" +
		"##./###/#.. => ####/#.#./..##/#.##\n" +
		"..#/###/#.. => .###/##.#/.##./#.#.\n" +
		"#.#/###/#.. => #.##/###./.###/....\n" +
		".##/###/#.. => #.##/..../.#../####\n" +
		"###/###/#.. => ##.#/###./.#../...#\n" +
		".#./#.#/.#. => ..#./##.#/.#../###.\n" +
		"##./#.#/.#. => ..##/###./..#./.#.#\n" +
		"#.#/#.#/.#. => .#../..##/.#.#/.#.#\n" +
		"###/#.#/.#. => ##../#..#/.#../..#.\n" +
		".#./###/.#. => #.../#..#/.#.#/....\n" +
		"##./###/.#. => ..../..##/..#./####\n" +
		"#.#/###/.#. => ..##/##.#/.###/...#\n" +
		"###/###/.#. => ##.#/#.##/..#./#.#.\n" +
		"#.#/..#/##. => #.../####/#.##/.###\n" +
		"###/..#/##. => ###./...#/.#.#/#..#\n" +
		".##/#.#/##. => ..../.#.#/##.#/..##\n" +
		"###/#.#/##. => ###./.#../.#.#/###.\n" +
		"#.#/.##/##. => ###./.#../.#../.#.#\n" +
		"###/.##/##. => .##./..../..../#.##\n" +
		".##/###/##. => ####/##../.###/##.#\n" +
		"###/###/##. => #..#/#.##/#.##/.#..\n" +
		"#.#/.../#.# => ####/#.#./#..#/.##.\n" +
		"###/.../#.# => .#../.#.#/.#../.#.#\n" +
		"###/#../#.# => ..#./..#./.###/#...\n" +
		"#.#/.#./#.# => #.#./..../.##./####\n" +
		"###/.#./#.# => #.../..##/.##./..#.\n" +
		"###/##./#.# => .#.#/##../#.#./..#.\n" +
		"#.#/#.#/#.# => #.##/#.##/#.##/..##\n" +
		"###/#.#/#.# => .###/#.#./.##./..##\n" +
		"#.#/###/#.# => ...#/#.#./..#./#..#\n" +
		"###/###/#.# => #.../#..#/#..#/.##.\n" +
		"###/#.#/### => .#.#/..##/##.#/#...\n" +
		"###/###/### => .###/#.#./#.../#...";

	@Test
	public void testPart1() {
		assertEquals(12, new Day21().part1(2, "../.# => ##./#../...\n" +
			".#./..#/### => #..#/..../..../#..#\n"));
	}

	@Test
	public void actualPart1() {
		System.out.println(new Day21().part1(5, INPUT));
	}

	@Test
	public void actualPart2() {
		System.out.println(new Day21().part1(18, INPUT));
	}


}
